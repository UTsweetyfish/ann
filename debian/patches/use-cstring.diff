Include cstring header and use strcmp in std namespace.

 -- Rafael Laboissiere <rafael@debian.org>  Tue, 11 Nov 2008 13:49:05 +0000

--- a/test/ann_test.cpp
+++ b/test/ann_test.cpp
@@ -36,7 +36,7 @@
 
 #include <ctime>						// clock
 #include <cmath>						// math routines
-#include <string>						// C string ops
+#include <cstring>						// C string ops
 #include <fstream>						// file I/O
 
 #include <ANN/ANN.h>					// ANN declarations
@@ -401,7 +401,7 @@
 {
 	int i;
 	for (i = 0; i < size; i++) {
-		if (!strcmp(arg, table[i])) return i;
+		if (!std::strcmp(arg, table[i])) return i;
 	}
 	return i;
 }
@@ -643,56 +643,56 @@
 		//----------------------------------------------------------------
 		//	Read options
 		//----------------------------------------------------------------
-		if (!strcmp(directive,"dim")) {
+		if (!std::strcmp(directive,"dim")) {
 			cin >> dim;
 		}
-		else if (!strcmp(directive,"colors")) {
+		else if (!std::strcmp(directive,"colors")) {
 			cin >> n_color;
 		}
-		else if (!strcmp(directive,"new_clust")) {
+		else if (!std::strcmp(directive,"new_clust")) {
 			new_clust = ANNtrue;
 		}
-		else if (!strcmp(directive,"max_clus_dim")) {
+		else if (!std::strcmp(directive,"max_clus_dim")) {
 			cin >> max_dim;
 		}
-		else if (!strcmp(directive,"std_dev")) {
+		else if (!std::strcmp(directive,"std_dev")) {
 			cin >> std_dev;
 		}
-		else if (!strcmp(directive,"std_dev_lo")) {
+		else if (!std::strcmp(directive,"std_dev_lo")) {
 			cin >> std_dev_lo;
 		}
-		else if (!strcmp(directive,"std_dev_hi")) {
+		else if (!std::strcmp(directive,"std_dev_hi")) {
 			cin >> std_dev_hi;
 		}
-		else if (!strcmp(directive,"corr_coef")) {
+		else if (!std::strcmp(directive,"corr_coef")) {
 			cin >> corr_coef;
 		}
-		else if (!strcmp(directive, "data_size")) {
+		else if (!std::strcmp(directive, "data_size")) {
 			cin >> data_size;
 		}
-		else if (!strcmp(directive,"query_size")) {
+		else if (!std::strcmp(directive,"query_size")) {
 			cin >> query_size;
 		}
-		else if (!strcmp(directive,"bucket_size")) {
+		else if (!std::strcmp(directive,"bucket_size")) {
 			cin >> bucket_size;
 		}
-		else if (!strcmp(directive,"epsilon")) {
+		else if (!std::strcmp(directive,"epsilon")) {
 			cin >> epsilon;
 		}
-		else if (!strcmp(directive,"max_pts_visit")) {
+		else if (!std::strcmp(directive,"max_pts_visit")) {
 			cin >> max_pts_visit;
 			valid_dirty = ANNtrue;				// validation must be redone
 		}
-		else if (!strcmp(directive,"radius_bound")) {
+		else if (!std::strcmp(directive,"radius_bound")) {
 			cin >> radius_bound;
 			valid_dirty = ANNtrue;				// validation must be redone
 		}
-		else if (!strcmp(directive,"near_neigh")) {
+		else if (!std::strcmp(directive,"near_neigh")) {
 			cin >> near_neigh;
 			true_nn = near_neigh + extra_nn;	// also reset true near neighs
 			valid_dirty = ANNtrue;				// validation must be redone
 		}
-		else if (!strcmp(directive,"true_near_neigh")) {
+		else if (!std::strcmp(directive,"true_near_neigh")) {
 			cin >> true_nn;
 			valid_dirty = ANNtrue;				// validation must be redone
 		}
@@ -701,21 +701,21 @@
 		//		The seed is reset by setting the global annIdum to the
 		//		negation of the seed value.  See rand.cpp.
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"seed")) {
+		else if (!std::strcmp(directive,"seed")) {
 			cin >> annIdum;
 			annIdum = -annIdum;
 		}
 		//----------------------------------------------------------------
 		//	validate option
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"validate")) {
+		else if (!std::strcmp(directive,"validate")) {
 			cin >> arg;							// input argument
-			if (!strcmp(arg, "on")) {
+			if (!std::strcmp(arg, "on")) {
 				validate = ANNtrue;
 				cout << "validate = on   "
 					 << "(Warning: this may slow execution time.)\n";
 			}
-			else if (!strcmp(arg, "off")) {
+			else if (!std::strcmp(arg, "off")) {
 				validate = ANNfalse;
 			}
 			else {
@@ -726,7 +726,7 @@
 		//----------------------------------------------------------------
 		//	distribution option
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"distribution")) {
+		else if (!std::strcmp(directive,"distribution")) {
 			cin >> arg;							// input name and translate
 			distr = (Distrib) lookUp(arg, distr_table, N_DISTRIBS);
 			if (distr >= N_DISTRIBS) {			// not something we recognize
@@ -737,7 +737,7 @@
 		//----------------------------------------------------------------
 		//	stats option
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"stats")) {
+		else if (!std::strcmp(directive,"stats")) {
 			cin >> arg;							// input name and translate
 			stats = (StatLev) lookUp(arg, stat_table, N_STAT_LEVELS);
 			if (stats >= N_STAT_LEVELS) {		// not something we recognize
@@ -750,7 +750,7 @@
 		//----------------------------------------------------------------
 		//	split_rule option
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"split_rule")) {
+		else if (!std::strcmp(directive,"split_rule")) {
 			cin >> arg;							// input split_rule name
 			split = (ANNsplitRule) lookUp(arg, split_table, N_SPLIT_RULES);
 			if (split >= N_SPLIT_RULES) {		// not something we recognize
@@ -761,7 +761,7 @@
 		//----------------------------------------------------------------
 		//	shrink_rule option
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"shrink_rule")) {
+		else if (!std::strcmp(directive,"shrink_rule")) {
 			cin >> arg;							// input split_rule name
 			shrink = (ANNshrinkRule) lookUp(arg, shrink_table, N_SHRINK_RULES);
 			if (shrink >= N_SHRINK_RULES) {		// not something we recognize
@@ -772,7 +772,7 @@
 		//----------------------------------------------------------------
 		//	label operation
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"output_label")) {
+		else if (!std::strcmp(directive,"output_label")) {
 			cin >> arg;
 			if (stats > SILENT)
 				cout << "<" << arg << ">\n";
@@ -780,7 +780,7 @@
 		//----------------------------------------------------------------
 		//	gen_data_pts operation
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"gen_data_pts")) {
+		else if (!std::strcmp(directive,"gen_data_pts")) {
 			if (distr == PLANTED) {				// planted distribution
 				Error("Cannot use planted distribution for data points", ANNabort);
 			}
@@ -798,7 +798,7 @@
 		//		are planted near the data points (which must already be
 		//		generated).
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"gen_query_pts")) {
+		else if (!std::strcmp(directive,"gen_query_pts")) {
 			if (distr == PLANTED) {				// planted distribution
 				if (data_pts == NULL) {
 					Error("Must generate data points before query points for planted distribution", ANNabort);
@@ -824,7 +824,7 @@
 		//----------------------------------------------------------------
 		//	read_data_pts operation
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"read_data_pts")) {
+		else if (!std::strcmp(directive,"read_data_pts")) {
 			cin >> arg;							// input file name
 			readPts(
 				data_pts,						// point array
@@ -836,7 +836,7 @@
 		//----------------------------------------------------------------
 		//	read_query_pts operation
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"read_query_pts")) {
+		else if (!std::strcmp(directive,"read_query_pts")) {
 			cin >> arg;							// input file name
 			readPts(
 				query_pts,						// point array
@@ -851,7 +851,7 @@
 		//		that when the shrinking rule is NONE (which is true by
 		//		default), then this constructs a kd-tree.
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"build_ann")) {
+		else if (!std::strcmp(directive,"build_ann")) {
 			//------------------------------------------------------------
 			//	Build the tree
 			//------------------------------------------------------------
@@ -902,7 +902,7 @@
 		//----------------------------------------------------------------
 		//	dump operation
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"dump")) {
+		else if (!std::strcmp(directive,"dump")) {
 			cin >> arg;							// input file name
 			if (the_tree == NULL) {				// no tree
 				Error("Cannot dump.  No tree has been built yet", ANNwarn);
@@ -926,7 +926,7 @@
 		//		Since this not only loads a tree, but loads a new set
 		//		of data points.
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"load")) {
+		else if (!std::strcmp(directive,"load")) {
 			cin >> arg;							// input file name
 			if (the_tree != NULL) {				// tree exists already
 				delete the_tree;				// get rid of it
@@ -977,7 +977,7 @@
 		//	nearest neighbors (k), and then use each k consecutive
 		//	entries to store the results of each query.
 		//----------------------------------------------------------------
-		else if (!strcmp(directive,"run_queries")) {
+		else if (!std::strcmp(directive,"run_queries")) {
 
 			//------------------------------------------------------------
 			//	Input arguments and print summary
@@ -985,10 +985,10 @@
 			enum {STANDARD, PRIORITY} method;
 
 			cin >> arg;							// input argument
-			if (!strcmp(arg, "standard")) {
+			if (!std::strcmp(arg, "standard")) {
 				method = STANDARD;
 			}
-			else if (!strcmp(arg, "priority")) {
+			else if (!std::strcmp(arg, "priority")) {
 				method = PRIORITY;
 			}
 			else {
